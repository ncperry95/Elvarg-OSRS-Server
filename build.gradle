plugins {
    id 'java'
    id 'application'
}

group = 'com.elvarg'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    // Netty / Guava / Gson / Commons-Compress
    implementation 'io.netty:netty-all:4.1.110.Final'
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.apache.commons:commons-compress:1.26.2'
}

java {
    // Use whatever you have installed; leaving toolchains off to avoid auto-downloads
    withJavadocJar()
    withSourcesJar()
}

application {
    // Main entrypoint
    mainClass = 'com.elvarg.Elvarg'
}

/**
 * Your sources aren’t in the default src/main/java — they’re under:
 *   "Elvarg - Server/src"
 * Tell Gradle explicitly so it compiles and packages them.
 */
sourceSets {
    main {
        java {
            setSrcDirs(['Elvarg - Server/src'])
            // include all .java under that tree by default
        }
        resources {
            // if you have any non-java assets in the same tree, include them as resources
            setSrcDirs(['Elvarg - Server/resources', 'Elvarg - Server/src'])
            // don’t treat .java files as resources
            exclude '**/*.java'
        }
    }
    test {
        java {
            // if you add tests later, point to them here
            setSrcDirs(['Elvarg - Server/test'])
        }
    }
}

/**
 * Normal thin JAR (classes only). Make it runnable via manifest.
 */
tasks.jar {
    manifest {
        attributes(
            'Main-Class': 'com.elvarg.Elvarg'
        )
    }
}

/**
 * FAT JAR (includes classes + all runtime dependencies)
 * Output: build/libs/elvarg-1.0.0-all.jar
 */
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Builds a runnable fat jar with all dependencies.'
    archiveBaseName.set('elvarg')
    archiveVersion.set(version)
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
            'Main-Class': 'com.elvarg.Elvarg'
        )
    }

    // 1) include *your* compiled classes & resources
    from(sourceSets.main.output)

    // 2) include all dependency jars’ contents
    from({
        configurations.runtimeClasspath
            .filter { it.name.endsWith('.jar') }
            .collect { zipTree(it) }
    })
}

/**
 * Keep the `run` task working during development.
 */
tasks.run {
    dependsOn tasks.classes
    classpath = sourceSets.main.runtimeClasspath
}

tasks.withType(Javadoc).configureEach {
    // Turn off doclint & don’t fail the build on doc issues
    options.addBooleanOption('Xdoclint:none', true)
    failOnError = false
}

tasks.javadoc {
    failOnError = false
}

