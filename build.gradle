plugins {
    id 'java'
    id 'application'
}

group = 'com.elvarg'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // If your project already resolves Netty/Gson via libs or other means, you can keep this empty.
    // If you need them explicitly, uncomment (pick versions your repo uses):
    // implementation 'io.netty:netty-all:4.1.108.Final'
    // implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'junit:junit:4.13.2'
}

application {
    // Your main entry point
    mainClass = 'com.elvarg.Elvarg'
}

/**
 * Build a runnable "fat" jar without Shadow.
 * - Adds Main-Class to manifest
 * - Merges runtime dependencies into the jar
 * - Excludes duplicate META-INF signature files
 */
tasks.named('jar') {
    // Make it a fat jar
    from(
        configurations.runtimeClasspath.get()
            .filter { it.name.endsWith('.jar') }
            .collect { zipTree(it) }
    ) {
        // Avoid signature/duplicate issues
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
        exclude 'module-info.class'
    }

    // If two jars contain same entries, prefer first
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Proper manifest so `java -jar` works
    manifest {
        attributes(
            'Main-Class': application.mainClass.get()
        )
    }

    // Optional: control the output name
    archiveBaseName.set('elvarg')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('') // no "-all" suffix; it's already fat
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

/**
 * Still keep `run` working via Application plugin.
 * You can pass args with: gradlew run --args="arg1 arg2"
 */
tasks.named('run') {
    standardInput = System.in
}
