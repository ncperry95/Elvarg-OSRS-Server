plugins {
    id 'java'
    id 'application'
}

group = 'com.elvarg'
version = '1.0.0'

repositories {
    mavenCentral()
}

/** Map sources to your actual folders */
sourceSets {
    main {
        java {
            srcDirs = ["Elvarg - Server/src"]
        }
        resources {
            srcDirs = ["Elvarg - Server/resources"]
        }
    }
}

dependencies {
    // Networking & buffers
    implementation 'io.netty:netty-all:4.1.108.Final'

    // Utilities/collections/concurrency
    implementation 'com.google.guava:guava:33.2.1-jre'

    // JSON
    implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'junit:junit:4.13.2'
}

application {
    mainClass = 'com.elvarg.Elvarg'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

/** Make the NORMAL jar runnable (classes only; no deps) */
tasks.named('jar', Jar).configure {
    from(sourceSets.main.output)
    manifest { attributes('Main-Class': application.mainClass.get()) }
    archiveBaseName.set('elvarg')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('')
}

/** Build a runnable fat JAR (includes runtime deps) */
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Assembles a runnable fat JAR with all dependencies.'
    archiveBaseName.set('elvarg')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('all')

    // include compiled classes/resources
    from(sourceSets.main.output)

    // include runtime dependencies
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }) {
        // avoid signature/module clashes
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
        exclude 'module-info.class'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes('Main-Class': application.mainClass.get()) }
}

/** Keep `gradlew run` working */
tasks.named('run') {
    standardInput = System.in
}
