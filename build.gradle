plugins {
    id 'java'
    id 'application'
}

group = 'com.elvarg'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    // If your project needs these explicitly, uncomment and set versions that match your code.
    // implementation 'io.netty:netty-all:4.1.108.Final'
    // implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'junit:junit:4.13.2'
}

application {
    // Your entry point
    mainClass = 'com.elvarg.Elvarg'
}

// Use your current JDK; don’t force a toolchain to be downloaded.
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // If needed, uncomment and set to your current JDK level (e.g. 17 or 21)
    // sourceCompatibility = JavaVersion.VERSION_17
    // targetCompatibility = JavaVersion.VERSION_17
}

/** Make the NORMAL jar runnable via `java -jar build/libs/elvarg-1.0.0.jar` */
tasks.named('jar', Jar).configure {
    manifest {
        attributes('Main-Class': application.mainClass.get())
    }
    archiveBaseName.set('elvarg')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('')
}

/**
 * Build a separate runnable “fat” JAR (includes runtime deps).
 * This leaves the normal `jar` intact and runnable too.
 */
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Assembles a runnable fat JAR with all dependencies.'

    archiveBaseName.set('elvarg')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('all')

    // Classes/resources from this project
    from(sourceSets.main.output)

    // Add runtime dependencies
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }) {
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
        exclude 'module-info.class'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes('Main-Class': application.mainClass.get())
    }
}

/** Keep `gradlew run` working (uses the correct CP automatically) */
tasks.named('run') {
    standardInput = System.in
}
